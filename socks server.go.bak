package main

import (
	"context"
	"fmt"
	"net"
	"wasiproxy/http"
	"wasiproxy/model"

	socks5 "github.com/armon/go-socks5"
)

var sessions *model.ForwarderServer
var httpServer *http.HttpServer

type ProxyAddress struct {
}

func (p *ProxyAddress) Allow(ctx context.Context, req *socks5.Request) (context.Context, bool) {
	return context.WithValue(ctx, ProxyAddress{}, req.AuthContext.Payload["Username"]), req.Command == 1
}

// StaticCredentials enables using a map directly as a credential store
type ProxyCredentials struct {
}

func (s ProxyCredentials) Valid(user, password string) bool {
	return sessions.CheckAccess(user, password)
}

type NOPResolver struct{}

func (d NOPResolver) Resolve(ctx context.Context, name string) (context.Context, net.IP, error) {
	return ctx, nil, nil
}

func main() {
	sessions = model.CreateSessionManager()
	httpServer = http.CreateServer(sessions)

	go httpServer.Serve()

	conf := &socks5.Config{
		Dial: func(ctx context.Context, network, addr string) (net.Conn, error) {
			user := ctx.Value(ProxyAddress{}).(string)
			fmt.Printf("%s is connecting to %s\n", user, addr)
			if user == "api" {
				if addr != "127.0.0.1:80" {
					return nil, fmt.Errorf("api user can only access api")
				}

				socket, http := net.Pipe()
				httpServer.Handle(http)
				return socket, nil
			}

			return sessions.OpenConnection(user, addr)
		},
		Rules:       &ProxyAddress{},
		Credentials: &ProxyCredentials{},
                Resolver: &NOPResolver{},
	}

	server, err := socks5.New(conf)
	if err != nil {
		panic(err)
	}

	ln, err := net.Listen("tcp", "0.0.0.0:2140")
	if err != nil {
		return
	}

	go func() {
		for {
			conn, err := ln.Accept()
			if err != nil {
				println("Errors accepting!")
			}

			err = sessions.HandleConnection(conn)
			if err != nil {
				fmt.Printf("Error accepting: %s\n", err)
			}
		}
	}()

	// Create SOCKS5 proxy on localhost port 8000
	if err := server.ListenAndServe("tcp", "0.0.0.0:2139"); err != nil {
		panic(err)
	}
}
